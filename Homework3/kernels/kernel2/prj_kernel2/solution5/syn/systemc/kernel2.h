// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel2_HH_
#define _kernel2_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct kernel2 : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > array_r_address0;
    sc_out< sc_logic > array_r_ce0;
    sc_in< sc_lv<32> > array_r_q0;
    sc_out< sc_lv<10> > array_r_address1;
    sc_out< sc_logic > array_r_ce1;
    sc_out< sc_logic > array_r_we1;
    sc_out< sc_lv<32> > array_r_d1;
    sc_in< sc_lv<32> > array_r_q1;


    // Module declarations
    kernel2(sc_module_name name);
    SC_HAS_PROCESS(kernel2);

    ~kernel2();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > aux3_1_reg_86;
    sc_signal< sc_lv<32> > aux2_1_reg_96;
    sc_signal< sc_lv<11> > i_0_reg_107;
    sc_signal< sc_lv<32> > aux3_0_reg_119;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > aux1_reg_168;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln10_fu_129_p2;
    sc_signal< sc_lv<1> > icmp_ln10_reg_188;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > res_fu_141_p2;
    sc_signal< sc_lv<32> > res_reg_192;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<11> > i_fu_147_p2;
    sc_signal< sc_lv<11> > i_reg_198;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<32> > ap_phi_mux_aux3_1_phi_fu_89_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<32> > ap_phi_mux_aux2_1_phi_fu_100_p4;
    sc_signal< sc_lv<11> > ap_phi_mux_i_0_phi_fu_111_p4;
    sc_signal< sc_lv<32> > ap_phi_mux_aux3_0_phi_fu_122_p4;
    sc_signal< sc_lv<64> > zext_ln12_fu_153_p1;
    sc_signal< sc_lv<32> > mul_ln11_fu_135_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<11> ap_const_lv11_3;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<11> ap_const_lv11_400;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<32> ap_const_lv32_4;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state4_pp0_stage0_iter0();
    void thread_ap_block_state5_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state4();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_aux2_1_phi_fu_100_p4();
    void thread_ap_phi_mux_aux3_0_phi_fu_122_p4();
    void thread_ap_phi_mux_aux3_1_phi_fu_89_p4();
    void thread_ap_phi_mux_i_0_phi_fu_111_p4();
    void thread_ap_ready();
    void thread_array_r_address0();
    void thread_array_r_address1();
    void thread_array_r_ce0();
    void thread_array_r_ce1();
    void thread_array_r_d1();
    void thread_array_r_we1();
    void thread_i_fu_147_p2();
    void thread_icmp_ln10_fu_129_p2();
    void thread_mul_ln11_fu_135_p2();
    void thread_res_fu_141_p2();
    void thread_zext_ln12_fu_153_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
