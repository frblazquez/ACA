// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "kernel2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic kernel2::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic kernel2::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> kernel2::ap_ST_fsm_state1 = "1";
const sc_lv<6> kernel2::ap_ST_fsm_state2 = "10";
const sc_lv<6> kernel2::ap_ST_fsm_state3 = "100";
const sc_lv<6> kernel2::ap_ST_fsm_state4 = "1000";
const sc_lv<6> kernel2::ap_ST_fsm_state5 = "10000";
const sc_lv<6> kernel2::ap_ST_fsm_state6 = "100000";
const sc_lv<32> kernel2::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool kernel2::ap_const_boolean_1 = true;
const sc_lv<32> kernel2::ap_const_lv32_2 = "10";
const sc_lv<32> kernel2::ap_const_lv32_3 = "11";
const sc_lv<32> kernel2::ap_const_lv32_1 = "1";
const sc_lv<1> kernel2::ap_const_lv1_0 = "0";
const sc_lv<32> kernel2::ap_const_lv32_4 = "100";
const sc_lv<11> kernel2::ap_const_lv11_3 = "11";
const sc_lv<11> kernel2::ap_const_lv11_400 = "10000000000";
const sc_lv<11> kernel2::ap_const_lv11_7FE = "11111111110";
const sc_lv<11> kernel2::ap_const_lv11_7FD = "11111111101";
const sc_lv<11> kernel2::ap_const_lv11_7FF = "11111111111";
const sc_lv<11> kernel2::ap_const_lv11_1 = "1";
const sc_lv<32> kernel2::ap_const_lv32_5 = "101";

kernel2::kernel2(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln7_1_fu_107_p2);
    sensitive << ( i_0_reg_85 );

    SC_METHOD(thread_add_ln7_2_fu_118_p2);
    sensitive << ( i_0_reg_85 );

    SC_METHOD(thread_add_ln7_3_fu_145_p0);
    sensitive << ( reg_97 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_add_ln7_fu_129_p2);
    sensitive << ( i_0_reg_85 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_enable_operation_17);
    sensitive << ( icmp_ln6_fu_101_p2 );

    SC_METHOD(thread_ap_enable_operation_21);
    sensitive << ( icmp_ln6_fu_101_p2 );

    SC_METHOD(thread_ap_enable_operation_26);

    SC_METHOD(thread_ap_enable_operation_27);

    SC_METHOD(thread_ap_enable_operation_36);

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_state2_pp0_iter0_stage0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_enable_state3_pp0_iter0_stage1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_enable_state5_pp0_iter0_stage3);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_array_r_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln7_1_fu_113_p1 );
    sensitive << ( zext_ln7_fu_135_p1 );

    SC_METHOD(thread_array_r_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln7_2_fu_124_p1 );
    sensitive << ( zext_ln7_3_fu_151_p1 );

    SC_METHOD(thread_array_r_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_array_r_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_array_r_d1);
    sensitive << ( mul_ln7_reg_185 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( add_ln7_3_fu_145_p0 );

    SC_METHOD(thread_array_r_we1);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_i_fu_156_p2);
    sensitive << ( i_0_reg_85 );

    SC_METHOD(thread_icmp_ln6_fu_101_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_85 );

    SC_METHOD(thread_mul_ln7_fu_140_p2);
    sensitive << ( reg_97 );
    sensitive << ( array_load_2_reg_180 );

    SC_METHOD(thread_zext_ln7_1_fu_113_p1);
    sensitive << ( add_ln7_1_fu_107_p2 );

    SC_METHOD(thread_zext_ln7_2_fu_124_p1);
    sensitive << ( add_ln7_2_fu_118_p2 );

    SC_METHOD(thread_zext_ln7_3_fu_151_p1);
    sensitive << ( i_0_reg_85 );

    SC_METHOD(thread_zext_ln7_fu_135_p1);
    sensitive << ( add_ln7_fu_129_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln6_fu_101_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "kernel2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, array_r_address0, "(port)array_r_address0");
    sc_trace(mVcdFile, array_r_ce0, "(port)array_r_ce0");
    sc_trace(mVcdFile, array_r_q0, "(port)array_r_q0");
    sc_trace(mVcdFile, array_r_address1, "(port)array_r_address1");
    sc_trace(mVcdFile, array_r_ce1, "(port)array_r_ce1");
    sc_trace(mVcdFile, array_r_we1, "(port)array_r_we1");
    sc_trace(mVcdFile, array_r_d1, "(port)array_r_d1");
    sc_trace(mVcdFile, array_r_q1, "(port)array_r_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_97, "reg_97");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln6_fu_101_p2, "icmp_ln6_fu_101_p2");
    sc_trace(mVcdFile, array_load_2_reg_180, "array_load_2_reg_180");
    sc_trace(mVcdFile, mul_ln7_fu_140_p2, "mul_ln7_fu_140_p2");
    sc_trace(mVcdFile, mul_ln7_reg_185, "mul_ln7_reg_185");
    sc_trace(mVcdFile, i_fu_156_p2, "i_fu_156_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, i_0_reg_85, "i_0_reg_85");
    sc_trace(mVcdFile, zext_ln7_1_fu_113_p1, "zext_ln7_1_fu_113_p1");
    sc_trace(mVcdFile, zext_ln7_2_fu_124_p1, "zext_ln7_2_fu_124_p1");
    sc_trace(mVcdFile, zext_ln7_fu_135_p1, "zext_ln7_fu_135_p1");
    sc_trace(mVcdFile, zext_ln7_3_fu_151_p1, "zext_ln7_3_fu_151_p1");
    sc_trace(mVcdFile, add_ln7_1_fu_107_p2, "add_ln7_1_fu_107_p2");
    sc_trace(mVcdFile, add_ln7_2_fu_118_p2, "add_ln7_2_fu_118_p2");
    sc_trace(mVcdFile, add_ln7_fu_129_p2, "add_ln7_fu_129_p2");
    sc_trace(mVcdFile, add_ln7_3_fu_145_p0, "add_ln7_3_fu_145_p0");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_enable_operation_36, "ap_enable_operation_36");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_state5_pp0_iter0_stage3, "ap_enable_state5_pp0_iter0_stage3");
    sc_trace(mVcdFile, ap_enable_operation_17, "ap_enable_operation_17");
    sc_trace(mVcdFile, ap_enable_state2_pp0_iter0_stage0, "ap_enable_state2_pp0_iter0_stage0");
    sc_trace(mVcdFile, ap_enable_operation_26, "ap_enable_operation_26");
    sc_trace(mVcdFile, ap_enable_state3_pp0_iter0_stage1, "ap_enable_state3_pp0_iter0_stage1");
    sc_trace(mVcdFile, ap_enable_operation_21, "ap_enable_operation_21");
    sc_trace(mVcdFile, ap_enable_operation_27, "ap_enable_operation_27");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("kernel2.hdltvin.dat");
    mHdltvoutHandle.open("kernel2.hdltvout.dat");
}

kernel2::~kernel2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void kernel2::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_0_reg_85 = i_fu_156_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_85 = ap_const_lv11_3;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        array_load_2_reg_180 = array_r_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        mul_ln7_reg_185 = mul_ln7_fu_140_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        reg_97 = array_r_q0.read();
    }
}

void kernel2::thread_add_ln7_1_fu_107_p2() {
    add_ln7_1_fu_107_p2 = (!i_0_reg_85.read().is_01() || !ap_const_lv11_7FE.is_01())? sc_lv<11>(): (sc_biguint<11>(i_0_reg_85.read()) + sc_bigint<11>(ap_const_lv11_7FE));
}

void kernel2::thread_add_ln7_2_fu_118_p2() {
    add_ln7_2_fu_118_p2 = (!i_0_reg_85.read().is_01() || !ap_const_lv11_7FD.is_01())? sc_lv<11>(): (sc_biguint<11>(i_0_reg_85.read()) + sc_bigint<11>(ap_const_lv11_7FD));
}

void kernel2::thread_add_ln7_3_fu_145_p0() {
    add_ln7_3_fu_145_p0 = reg_97.read();
}

void kernel2::thread_add_ln7_fu_129_p2() {
    add_ln7_fu_129_p2 = (!i_0_reg_85.read().is_01() || !ap_const_lv11_7FF.is_01())? sc_lv<11>(): (sc_biguint<11>(i_0_reg_85.read()) + sc_bigint<11>(ap_const_lv11_7FF));
}

void kernel2::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void kernel2::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void kernel2::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void kernel2::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void kernel2::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void kernel2::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void kernel2::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void kernel2::thread_ap_enable_operation_17() {
    ap_enable_operation_17 = esl_seteq<1,1,1>(icmp_ln6_fu_101_p2.read(), ap_const_lv1_0);
}

void kernel2::thread_ap_enable_operation_21() {
    ap_enable_operation_21 = esl_seteq<1,1,1>(icmp_ln6_fu_101_p2.read(), ap_const_lv1_0);
}

void kernel2::thread_ap_enable_operation_26() {
    ap_enable_operation_26 = esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel2::thread_ap_enable_operation_27() {
    ap_enable_operation_27 = esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel2::thread_ap_enable_operation_36() {
    ap_enable_operation_36 = esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void kernel2::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void kernel2::thread_ap_enable_state2_pp0_iter0_stage0() {
    ap_enable_state2_pp0_iter0_stage0 = (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_CS_fsm_state2.read(), ap_const_logic_1));
}

void kernel2::thread_ap_enable_state3_pp0_iter0_stage1() {
    ap_enable_state3_pp0_iter0_stage1 = (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_CS_fsm_state3.read(), ap_const_logic_1));
}

void kernel2::thread_ap_enable_state5_pp0_iter0_stage3() {
    ap_enable_state5_pp0_iter0_stage3 = (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_CS_fsm_state5.read(), ap_const_logic_1));
}

void kernel2::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void kernel2::thread_ap_idle_pp0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void kernel2::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void kernel2::thread_array_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        array_r_address0 =  (sc_lv<10>) (zext_ln7_fu_135_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        array_r_address0 =  (sc_lv<10>) (zext_ln7_1_fu_113_p1.read());
    } else {
        array_r_address0 = "XXXXXXXXXX";
    }
}

void kernel2::thread_array_r_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        array_r_address1 =  (sc_lv<10>) (zext_ln7_3_fu_151_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        array_r_address1 =  (sc_lv<10>) (zext_ln7_2_fu_124_p1.read());
    } else {
        array_r_address1 = "XXXXXXXXXX";
    }
}

void kernel2::thread_array_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        array_r_ce0 = ap_const_logic_1;
    } else {
        array_r_ce0 = ap_const_logic_0;
    }
}

void kernel2::thread_array_r_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        array_r_ce1 = ap_const_logic_1;
    } else {
        array_r_ce1 = ap_const_logic_0;
    }
}

void kernel2::thread_array_r_d1() {
    array_r_d1 = (!add_ln7_3_fu_145_p0.read().is_01() || !mul_ln7_reg_185.read().is_01())? sc_lv<32>(): (sc_biguint<32>(add_ln7_3_fu_145_p0.read()) + sc_biguint<32>(mul_ln7_reg_185.read()));
}

void kernel2::thread_array_r_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        array_r_we1 = ap_const_logic_1;
    } else {
        array_r_we1 = ap_const_logic_0;
    }
}

void kernel2::thread_i_fu_156_p2() {
    i_fu_156_p2 = (!i_0_reg_85.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_biguint<11>(i_0_reg_85.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void kernel2::thread_icmp_ln6_fu_101_p2() {
    icmp_ln6_fu_101_p2 = (!i_0_reg_85.read().is_01() || !ap_const_lv11_400.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_85.read() == ap_const_lv11_400);
}

void kernel2::thread_mul_ln7_fu_140_p2() {
    mul_ln7_fu_140_p2 = (!reg_97.read().is_01() || !array_load_2_reg_180.read().is_01())? sc_lv<32>(): sc_bigint<32>(reg_97.read()) * sc_bigint<32>(array_load_2_reg_180.read());
}

void kernel2::thread_zext_ln7_1_fu_113_p1() {
    zext_ln7_1_fu_113_p1 = esl_zext<64,11>(add_ln7_1_fu_107_p2.read());
}

void kernel2::thread_zext_ln7_2_fu_124_p1() {
    zext_ln7_2_fu_124_p1 = esl_zext<64,11>(add_ln7_2_fu_118_p2.read());
}

void kernel2::thread_zext_ln7_3_fu_151_p1() {
    zext_ln7_3_fu_151_p1 = esl_zext<64,11>(i_0_reg_85.read());
}

void kernel2::thread_zext_ln7_fu_135_p1() {
    zext_ln7_fu_135_p1 = esl_zext<64,11>(add_ln7_fu_129_p2.read());
}

void kernel2::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln6_fu_101_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

void kernel2::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_r_address0\" :  \"" << array_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_r_ce0\" :  \"" << array_r_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"array_r_q0\" :  \"" << array_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_r_address1\" :  \"" << array_r_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_r_ce1\" :  \"" << array_r_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_r_we1\" :  \"" << array_r_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_r_d1\" :  \"" << array_r_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"array_r_q1\" :  \"" << array_r_q1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

