-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    array_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    array_r_ce0 : OUT STD_LOGIC;
    array_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    array_r_ce1 : OUT STD_LOGIC;
    array_r_we1 : OUT STD_LOGIC;
    array_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    array_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel2,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.580000,HLS_SYN_LAT=4086,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=113,HLS_SYN_LUT=246,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_7FE : STD_LOGIC_VECTOR (10 downto 0) := "11111111110";
    constant ap_const_lv11_7FD : STD_LOGIC_VECTOR (10 downto 0) := "11111111101";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_97 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln6_fu_101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal array_load_2_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln7_fu_140_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln7_reg_185 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_156_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_0_reg_85 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln7_1_fu_113_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln7_2_fu_124_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln7_fu_135_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln7_3_fu_151_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln7_1_fu_107_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln7_2_fu_118_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln7_fu_129_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln7_3_fu_145_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_operation_36 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_state5_pp0_iter0_stage3 : BOOLEAN;
    signal ap_enable_operation_17 : BOOLEAN;
    signal ap_enable_state2_pp0_iter0_stage0 : BOOLEAN;
    signal ap_enable_operation_26 : BOOLEAN;
    signal ap_enable_state3_pp0_iter0_stage1 : BOOLEAN;
    signal ap_enable_operation_21 : BOOLEAN;
    signal ap_enable_operation_27 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    i_0_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_85 <= i_fu_156_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_85 <= ap_const_lv11_3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                array_load_2_reg_180 <= array_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mul_ln7_reg_185 <= mul_ln7_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_97 <= array_r_q0;
            end if;
        end if;
    end process;
    ap_enable_reg_pp0_iter0 <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln6_fu_101_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln6_fu_101_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln7_1_fu_107_p2 <= std_logic_vector(unsigned(i_0_reg_85) + unsigned(ap_const_lv11_7FE));
    add_ln7_2_fu_118_p2 <= std_logic_vector(unsigned(i_0_reg_85) + unsigned(ap_const_lv11_7FD));
    add_ln7_3_fu_145_p0 <= reg_97;
    add_ln7_fu_129_p2 <= std_logic_vector(unsigned(i_0_reg_85) + unsigned(ap_const_lv11_7FF));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_operation_17_assign_proc : process(icmp_ln6_fu_101_p2)
    begin
                ap_enable_operation_17 <= (icmp_ln6_fu_101_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_21_assign_proc : process(icmp_ln6_fu_101_p2)
    begin
                ap_enable_operation_21 <= (icmp_ln6_fu_101_p2 = ap_const_lv1_0);
    end process;

        ap_enable_operation_26 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_27 <= (ap_const_boolean_1 = ap_const_boolean_1);
        ap_enable_operation_36 <= (ap_const_boolean_1 = ap_const_boolean_1);
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_state2_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state2_pp0_iter0_stage0 <= ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_enable_state3_pp0_iter0_stage1_assign_proc : process(ap_CS_fsm_state3, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state3_pp0_iter0_stage1 <= ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_enable_state5_pp0_iter0_stage3_assign_proc : process(ap_CS_fsm_state5, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state5_pp0_iter0_stage3 <= ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    array_r_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, zext_ln7_1_fu_113_p1, zext_ln7_fu_135_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            array_r_address0 <= zext_ln7_fu_135_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            array_r_address0 <= zext_ln7_1_fu_113_p1(10 - 1 downto 0);
        else 
            array_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    array_r_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, zext_ln7_2_fu_124_p1, zext_ln7_3_fu_151_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            array_r_address1 <= zext_ln7_3_fu_151_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            array_r_address1 <= zext_ln7_2_fu_124_p1(10 - 1 downto 0);
        else 
            array_r_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    array_r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            array_r_ce0 <= ap_const_logic_1;
        else 
            array_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    array_r_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            array_r_ce1 <= ap_const_logic_1;
        else 
            array_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    array_r_d1 <= std_logic_vector(unsigned(add_ln7_3_fu_145_p0) + unsigned(mul_ln7_reg_185));

    array_r_we1_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            array_r_we1 <= ap_const_logic_1;
        else 
            array_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_156_p2 <= std_logic_vector(unsigned(i_0_reg_85) + unsigned(ap_const_lv11_1));
    icmp_ln6_fu_101_p2 <= "1" when (i_0_reg_85 = ap_const_lv11_400) else "0";
    mul_ln7_fu_140_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(reg_97) * signed(array_load_2_reg_180))), 32));
    zext_ln7_1_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_1_fu_107_p2),64));
    zext_ln7_2_fu_124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_2_fu_118_p2),64));
    zext_ln7_3_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_85),64));
    zext_ln7_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln7_fu_129_p2),64));
end behav;
