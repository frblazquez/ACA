// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel3_HH_
#define _kernel3_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "kernel3_fadd_32nsbkb.h"

namespace ap_rtl {

struct kernel3 : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > hist_address0;
    sc_out< sc_logic > hist_ce0;
    sc_out< sc_logic > hist_we0;
    sc_out< sc_lv<32> > hist_d0;
    sc_in< sc_lv<32> > hist_q0;
    sc_out< sc_lv<10> > weight_address0;
    sc_out< sc_logic > weight_ce0;
    sc_in< sc_lv<32> > weight_q0;
    sc_out< sc_lv<10> > index_address0;
    sc_out< sc_logic > index_ce0;
    sc_in< sc_lv<32> > index_q0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    kernel3(sc_module_name name);
    SC_HAS_PROCESS(kernel3);

    ~kernel3();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    kernel3_fadd_32nsbkb<1,4,32,32,32>* kernel3_fadd_32nsbkb_U1;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<11> > i_fu_88_p2;
    sc_signal< sc_lv<11> > i_reg_108;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln5_fu_82_p2;
    sc_signal< sc_lv<10> > hist_addr_reg_123;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > weight_load_reg_128;
    sc_signal< sc_lv<32> > hist_load_reg_133;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > grp_fu_78_p2;
    sc_signal< sc_lv<32> > tmp_reg_138;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<11> > i_0_reg_67;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<64> > zext_ln6_fu_94_p1;
    sc_signal< sc_lv<64> > sext_ln6_fu_100_p1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_state3;
    static const sc_lv<9> ap_ST_fsm_state4;
    static const sc_lv<9> ap_ST_fsm_state5;
    static const sc_lv<9> ap_ST_fsm_state6;
    static const sc_lv<9> ap_ST_fsm_state7;
    static const sc_lv<9> ap_ST_fsm_state8;
    static const sc_lv<9> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<11> ap_const_lv11_400;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_hist_address0();
    void thread_hist_ce0();
    void thread_hist_d0();
    void thread_hist_we0();
    void thread_i_fu_88_p2();
    void thread_icmp_ln5_fu_82_p2();
    void thread_index_address0();
    void thread_index_ce0();
    void thread_sext_ln6_fu_100_p1();
    void thread_weight_address0();
    void thread_weight_ce0();
    void thread_zext_ln6_fu_94_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
