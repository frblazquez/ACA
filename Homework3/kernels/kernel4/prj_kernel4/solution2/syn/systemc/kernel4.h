// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel4_HH_
#define _kernel4_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct kernel4 : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > array_r_address0;
    sc_out< sc_logic > array_r_ce0;
    sc_in< sc_lv<32> > array_r_q0;
    sc_out< sc_lv<10> > array_r_address1;
    sc_out< sc_logic > array_r_ce1;
    sc_out< sc_logic > array_r_we1;
    sc_out< sc_lv<32> > array_r_d1;
    sc_in< sc_lv<32> > array_r_q1;
    sc_out< sc_lv<10> > index_address0;
    sc_out< sc_logic > index_ce0;
    sc_in< sc_lv<32> > index_q0;
    sc_in< sc_lv<32> > offset;


    // Module declarations
    kernel4(sc_module_name name);
    SC_HAS_PROCESS(kernel4);

    ~kernel4();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > reg_98;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<10> > array_addr_reg_161;
    sc_signal< sc_lv<32> > i_fu_107_p2;
    sc_signal< sc_lv<32> > i_reg_167;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln5_fu_113_p2;
    sc_signal< sc_lv<32> > index_load_reg_190;
    sc_signal< sc_lv<32> > array_load_2_reg_196;
    sc_signal< sc_lv<32> > mul_ln6_fu_136_p2;
    sc_signal< sc_lv<32> > mul_ln6_reg_201;
    sc_signal< sc_lv<32> > mul_ln6_1_fu_141_p2;
    sc_signal< sc_lv<32> > mul_ln6_1_reg_206;
    sc_signal< sc_lv<32> > i_0_in_reg_89;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > sext_ln6_fu_102_p1;
    sc_signal< sc_lv<64> > sext_ln6_1_fu_119_p1;
    sc_signal< sc_lv<64> > sext_ln6_2_fu_131_p1;
    sc_signal< sc_lv<32> > sext_ln6_fu_102_p0;
    sc_signal< sc_lv<32> > add_ln6_fu_125_p2;
    sc_signal< sc_lv<32> > sub_ln6_fu_145_p0;
    sc_signal< sc_lv<32> > sub_ln6_fu_145_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_3FF;
    static const sc_lv<32> ap_const_lv32_5;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln6_fu_125_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_array_r_address0();
    void thread_array_r_address1();
    void thread_array_r_ce0();
    void thread_array_r_ce1();
    void thread_array_r_d1();
    void thread_array_r_we1();
    void thread_i_fu_107_p2();
    void thread_icmp_ln5_fu_113_p2();
    void thread_index_address0();
    void thread_index_ce0();
    void thread_mul_ln6_1_fu_141_p2();
    void thread_mul_ln6_fu_136_p2();
    void thread_sext_ln6_1_fu_119_p1();
    void thread_sext_ln6_2_fu_131_p1();
    void thread_sext_ln6_fu_102_p0();
    void thread_sext_ln6_fu_102_p1();
    void thread_sub_ln6_fu_145_p0();
    void thread_sub_ln6_fu_145_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
