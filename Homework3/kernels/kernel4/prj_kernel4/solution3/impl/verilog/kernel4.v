// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel4,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.580000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=372,HLS_SYN_LUT=423,HLS_VERSION=2019_2}" *)

module kernel4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        array_r_address0,
        array_r_ce0,
        array_r_q0,
        array_r_address1,
        array_r_ce1,
        array_r_we1,
        array_r_d1,
        array_r_q1,
        index_address0,
        index_ce0,
        index_q0,
        offset
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] array_r_address0;
output   array_r_ce0;
input  [31:0] array_r_q0;
output  [9:0] array_r_address1;
output   array_r_ce1;
output   array_r_we1;
output  [31:0] array_r_d1;
input  [31:0] array_r_q1;
output  [9:0] index_address0;
output   index_ce0;
input  [31:0] index_q0;
input  [31:0] offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] array_r_address0;
reg array_r_ce0;
reg[9:0] array_r_address1;
reg array_r_ce1;
reg array_r_we1;
reg index_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] res_0_reg_92;
reg  signed [31:0] arr1_0_reg_103;
reg   [31:0] i_0_in_reg_113;
wire   [0:0] icmp_ln5_fu_122_p2;
reg   [0:0] icmp_ln5_reg_196;
reg   [9:0] array_addr_reg_200;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln10_fu_144_p2;
reg   [0:0] icmp_ln10_reg_221;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln10_reg_221_pp0_iter1_reg;
reg   [0:0] icmp_ln10_reg_221_pp0_iter2_reg;
wire  signed [31:0] i_fu_150_p2;
reg  signed [31:0] i_reg_225;
reg    ap_enable_reg_pp0_iter0;
reg  signed [31:0] arr2_reg_240;
reg    ap_enable_reg_pp0_iter1;
reg  signed [31:0] arr2_reg_240_pp0_iter2_reg;
reg  signed [31:0] index_load_reg_246;
wire   [31:0] mul_ln12_fu_172_p2;
reg   [31:0] mul_ln12_reg_252;
wire   [31:0] mul_ln12_1_fu_177_p2;
reg   [31:0] mul_ln12_1_reg_257;
wire   [31:0] res_1_fu_186_p2;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg  signed [31:0] ap_phi_mux_arr1_0_phi_fu_106_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_i_0_in_phi_fu_116_p4;
wire  signed [63:0] sext_ln8_fu_128_p1;
wire  signed [63:0] sext_ln9_fu_139_p1;
wire  signed [63:0] sext_ln11_fu_162_p1;
wire  signed [63:0] sext_ln12_fu_167_p1;
wire    ap_CS_fsm_state7;
wire  signed [31:0] icmp_ln5_fu_122_p0;
wire  signed [31:0] sext_ln8_fu_128_p0;
wire  signed [31:0] add_ln9_fu_133_p0;
wire   [31:0] add_ln9_fu_133_p2;
wire   [31:0] add_ln11_fu_156_p2;
wire   [31:0] add_ln12_fu_181_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        arr1_0_reg_103 <= arr2_reg_240_pp0_iter2_reg;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        arr1_0_reg_103 <= array_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_221 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_0_in_reg_113 <= i_reg_225;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_0_in_reg_113 <= offset;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_0_reg_92 <= res_1_fu_186_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        res_0_reg_92 <= array_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_221 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        arr2_reg_240 <= array_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        arr2_reg_240_pp0_iter2_reg <= arr2_reg_240;
        icmp_ln10_reg_221_pp0_iter2_reg <= icmp_ln10_reg_221_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln5_fu_122_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        array_addr_reg_200 <= sext_ln8_fu_128_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_144_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_225 <= i_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_221 <= icmp_ln10_fu_144_p2;
        icmp_ln10_reg_221_pp0_iter1_reg <= icmp_ln10_reg_221;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln5_reg_196 <= icmp_ln5_fu_122_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_221 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        index_load_reg_246 <= index_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_221_pp0_iter1_reg == 1'd0))) begin
        mul_ln12_1_reg_257 <= mul_ln12_1_fu_177_p2;
        mul_ln12_reg_252 <= mul_ln12_fu_172_p2;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_144_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_221_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_arr1_0_phi_fu_106_p4 = arr2_reg_240_pp0_iter2_reg;
    end else begin
        ap_phi_mux_arr1_0_phi_fu_106_p4 = arr1_0_reg_103;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_221 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_0_in_phi_fu_116_p4 = i_reg_225;
    end else begin
        ap_phi_mux_i_0_in_phi_fu_116_p4 = i_0_in_reg_113;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        array_r_address0 = sext_ln11_fu_162_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        array_r_address0 = sext_ln8_fu_128_p1;
    end else begin
        array_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        array_r_address1 = array_addr_reg_200;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        array_r_address1 = sext_ln9_fu_139_p1;
    end else begin
        array_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        array_r_ce0 = 1'b1;
    end else begin
        array_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        array_r_ce1 = 1'b1;
    end else begin
        array_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln5_reg_196 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        array_r_we1 = 1'b1;
    end else begin
        array_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        index_ce0 = 1'b1;
    end else begin
        index_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (icmp_ln5_fu_122_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((ap_start == 1'b1) & (icmp_ln5_fu_122_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_fu_144_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln10_fu_144_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_156_p2 = (ap_phi_mux_i_0_in_phi_fu_116_p4 + 32'd2);

assign add_ln12_fu_181_p2 = (mul_ln12_1_reg_257 + res_0_reg_92);

assign add_ln9_fu_133_p0 = offset;

assign add_ln9_fu_133_p2 = ($signed(add_ln9_fu_133_p0) + $signed(32'd1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign array_r_d1 = res_0_reg_92;

assign i_fu_150_p2 = (ap_phi_mux_i_0_in_phi_fu_116_p4 + 32'd1);

assign icmp_ln10_fu_144_p2 = ((ap_phi_mux_i_0_in_phi_fu_116_p4 == 32'd1022) ? 1'b1 : 1'b0);

assign icmp_ln5_fu_122_p0 = offset;

assign icmp_ln5_fu_122_p2 = (($signed(icmp_ln5_fu_122_p0) > $signed(32'd1021)) ? 1'b1 : 1'b0);

assign index_address0 = sext_ln12_fu_167_p1;

assign mul_ln12_1_fu_177_p2 = ($signed(index_load_reg_246) * $signed(arr2_reg_240));

assign mul_ln12_fu_172_p2 = ($signed(index_load_reg_246) * $signed(ap_phi_mux_arr1_0_phi_fu_106_p4));

assign res_1_fu_186_p2 = (add_ln12_fu_181_p2 - mul_ln12_reg_252);

assign sext_ln11_fu_162_p1 = $signed(add_ln11_fu_156_p2);

assign sext_ln12_fu_167_p1 = i_fu_150_p2;

assign sext_ln8_fu_128_p0 = offset;

assign sext_ln8_fu_128_p1 = sext_ln8_fu_128_p0;

assign sext_ln9_fu_139_p1 = $signed(add_ln9_fu_133_p2);

endmodule //kernel4
