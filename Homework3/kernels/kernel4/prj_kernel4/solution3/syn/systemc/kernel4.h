// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel4_HH_
#define _kernel4_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct kernel4 : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > array_r_address0;
    sc_out< sc_logic > array_r_ce0;
    sc_in< sc_lv<32> > array_r_q0;
    sc_out< sc_lv<10> > array_r_address1;
    sc_out< sc_logic > array_r_ce1;
    sc_out< sc_logic > array_r_we1;
    sc_out< sc_lv<32> > array_r_d1;
    sc_in< sc_lv<32> > array_r_q1;
    sc_out< sc_lv<10> > index_address0;
    sc_out< sc_logic > index_ce0;
    sc_in< sc_lv<32> > index_q0;
    sc_in< sc_lv<32> > offset;


    // Module declarations
    kernel4(sc_module_name name);
    SC_HAS_PROCESS(kernel4);

    ~kernel4();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > res_0_reg_92;
    sc_signal< sc_lv<32> > arr1_0_reg_103;
    sc_signal< sc_lv<32> > i_0_in_reg_113;
    sc_signal< sc_lv<1> > icmp_ln5_fu_122_p2;
    sc_signal< sc_lv<1> > icmp_ln5_reg_196;
    sc_signal< sc_lv<10> > array_addr_reg_200;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln10_fu_144_p2;
    sc_signal< sc_lv<1> > icmp_ln10_reg_221;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln10_reg_221_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln10_reg_221_pp0_iter2_reg;
    sc_signal< sc_lv<32> > i_fu_150_p2;
    sc_signal< sc_lv<32> > i_reg_225;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > arr2_reg_240;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<32> > arr2_reg_240_pp0_iter2_reg;
    sc_signal< sc_lv<32> > index_load_reg_246;
    sc_signal< sc_lv<32> > mul_ln12_fu_172_p2;
    sc_signal< sc_lv<32> > mul_ln12_reg_252;
    sc_signal< sc_lv<32> > mul_ln12_1_fu_177_p2;
    sc_signal< sc_lv<32> > mul_ln12_1_reg_257;
    sc_signal< sc_lv<32> > res_1_fu_186_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<32> > ap_phi_mux_arr1_0_phi_fu_106_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<32> > ap_phi_mux_i_0_in_phi_fu_116_p4;
    sc_signal< sc_lv<64> > sext_ln8_fu_128_p1;
    sc_signal< sc_lv<64> > sext_ln9_fu_139_p1;
    sc_signal< sc_lv<64> > sext_ln11_fu_162_p1;
    sc_signal< sc_lv<64> > sext_ln12_fu_167_p1;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<32> > icmp_ln5_fu_122_p0;
    sc_signal< sc_lv<32> > sext_ln8_fu_128_p0;
    sc_signal< sc_lv<32> > add_ln9_fu_133_p0;
    sc_signal< sc_lv<32> > add_ln9_fu_133_p2;
    sc_signal< sc_lv<32> > add_ln11_fu_156_p2;
    sc_signal< sc_lv<32> > add_ln12_fu_181_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_3FD;
    static const sc_lv<32> ap_const_lv32_3FE;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln11_fu_156_p2();
    void thread_add_ln12_fu_181_p2();
    void thread_add_ln9_fu_133_p0();
    void thread_add_ln9_fu_133_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_block_state6_pp0_stage0_iter3();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_arr1_0_phi_fu_106_p4();
    void thread_ap_phi_mux_i_0_in_phi_fu_116_p4();
    void thread_ap_ready();
    void thread_array_r_address0();
    void thread_array_r_address1();
    void thread_array_r_ce0();
    void thread_array_r_ce1();
    void thread_array_r_d1();
    void thread_array_r_we1();
    void thread_i_fu_150_p2();
    void thread_icmp_ln10_fu_144_p2();
    void thread_icmp_ln5_fu_122_p0();
    void thread_icmp_ln5_fu_122_p2();
    void thread_index_address0();
    void thread_index_ce0();
    void thread_mul_ln12_1_fu_177_p2();
    void thread_mul_ln12_fu_172_p2();
    void thread_res_1_fu_186_p2();
    void thread_sext_ln11_fu_162_p1();
    void thread_sext_ln12_fu_167_p1();
    void thread_sext_ln8_fu_128_p0();
    void thread_sext_ln8_fu_128_p1();
    void thread_sext_ln9_fu_139_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
