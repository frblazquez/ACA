// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel5_HH_
#define _kernel5_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "kernel5_fadd_32nsbkb.h"
#include "kernel5_fcmp_32nscud.h"

namespace ap_rtl {

struct kernel5 : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > bound;
    sc_out< sc_lv<10> > a_address0;
    sc_out< sc_logic > a_ce0;
    sc_in< sc_lv<32> > a_q0;
    sc_out< sc_lv<10> > b_address0;
    sc_out< sc_logic > b_ce0;
    sc_in< sc_lv<32> > b_q0;
    sc_out< sc_lv<32> > ap_return;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<5> > ap_var_for_const1;


    // Module declarations
    kernel5(sc_module_name name);
    SC_HAS_PROCESS(kernel5);

    ~kernel5();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    kernel5_fadd_32nsbkb<1,4,32,32,32>* kernel5_fadd_32nsbkb_U1;
    kernel5_fcmp_32nscud<1,2,32,32,1>* kernel5_fcmp_32nscud_U2;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > or_ln7_1_fu_136_p2;
    sc_signal< sc_lv<1> > or_ln7_1_reg_228;
    sc_signal< sc_lv<32> > i_fu_211_p2;
    sc_signal< sc_lv<32> > i_reg_236;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > and_ln7_fu_205_p2;
    sc_signal< sc_lv<32> > a_load_reg_251;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > b_load_reg_256;
    sc_signal< sc_lv<32> > grp_fu_97_p2;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<32> > sum_01_reg_74;
    sc_signal< sc_lv<32> > i_0_reg_86;
    sc_signal< sc_lv<64> > sext_ln9_fu_217_p1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > bitcast_ln7_1_fu_106_p1;
    sc_signal< sc_lv<8> > tmp_1_fu_110_p4;
    sc_signal< sc_lv<23> > trunc_ln7_fu_120_p1;
    sc_signal< sc_lv<1> > icmp_ln7_3_fu_130_p2;
    sc_signal< sc_lv<1> > icmp_ln7_fu_124_p2;
    sc_signal< sc_lv<32> > bitcast_ln7_fu_142_p1;
    sc_signal< sc_lv<8> > tmp_fu_146_p4;
    sc_signal< sc_lv<23> > trunc_ln7_1_fu_156_p1;
    sc_signal< sc_lv<1> > icmp_ln7_2_fu_166_p2;
    sc_signal< sc_lv<1> > icmp_ln7_1_fu_160_p2;
    sc_signal< sc_lv<1> > or_ln7_fu_172_p2;
    sc_signal< sc_lv<1> > and_ln7_1_fu_178_p2;
    sc_signal< sc_lv<1> > grp_fu_101_p2;
    sc_signal< sc_lv<22> > tmp_3_fu_189_p4;
    sc_signal< sc_lv<1> > and_ln7_2_fu_183_p2;
    sc_signal< sc_lv<1> > icmp_ln7_4_fu_199_p2;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_state5;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<22> ap_const_lv22_1;
    static const sc_lv<5> ap_const_lv5_4;
    static const sc_lv<1> ap_const_lv1_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_a_address0();
    void thread_a_ce0();
    void thread_and_ln7_1_fu_178_p2();
    void thread_and_ln7_2_fu_183_p2();
    void thread_and_ln7_fu_205_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state8();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_b_address0();
    void thread_b_ce0();
    void thread_bitcast_ln7_1_fu_106_p1();
    void thread_bitcast_ln7_fu_142_p1();
    void thread_i_fu_211_p2();
    void thread_icmp_ln7_1_fu_160_p2();
    void thread_icmp_ln7_2_fu_166_p2();
    void thread_icmp_ln7_3_fu_130_p2();
    void thread_icmp_ln7_4_fu_199_p2();
    void thread_icmp_ln7_fu_124_p2();
    void thread_or_ln7_1_fu_136_p2();
    void thread_or_ln7_fu_172_p2();
    void thread_sext_ln9_fu_217_p1();
    void thread_tmp_1_fu_110_p4();
    void thread_tmp_3_fu_189_p4();
    void thread_tmp_fu_146_p4();
    void thread_trunc_ln7_1_fu_156_p1();
    void thread_trunc_ln7_fu_120_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
