// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel7,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.348000,HLS_SYN_LAT=4104,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=523,HLS_SYN_LUT=582,HLS_VERSION=2019_2}" *)

module kernel7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_pp0_stage2 = 6'd8;
parameter    ap_ST_fsm_pp0_stage3 = 6'd16;
parameter    ap_ST_fsm_state13 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] a_address0;
output   a_ce0;
input  [31:0] a_q0;
output  [9:0] b_address0;
output   b_ce0;
input  [31:0] b_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] sum_0_reg_78;
reg   [10:0] i_0_reg_90;
wire   [0:0] icmp_ln6_fu_110_p2;
reg   [0:0] icmp_ln6_reg_212;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln6_reg_212_pp0_iter1_reg;
reg   [0:0] icmp_ln6_reg_212_pp0_iter2_reg;
wire   [10:0] i_fu_116_p2;
reg   [10:0] i_reg_216;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] a_load_reg_231;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_state11_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] b_load_reg_238;
wire   [0:0] icmp_ln8_fu_162_p2;
reg   [0:0] icmp_ln8_reg_245;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state8_pp0_stage2_iter1;
wire    ap_block_state12_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire   [0:0] icmp_ln8_1_fu_168_p2;
reg   [0:0] icmp_ln8_1_reg_250;
wire   [0:0] icmp_ln8_2_fu_174_p2;
reg   [0:0] icmp_ln8_2_reg_255;
wire   [0:0] icmp_ln8_3_fu_180_p2;
reg   [0:0] icmp_ln8_3_reg_260;
wire   [0:0] grp_fu_106_p2;
reg   [0:0] tmp_4_reg_265;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state9_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] grp_fu_101_p2;
reg   [31:0] tmp_1_reg_270;
reg    ap_enable_reg_pp0_iter1;
wire   [0:0] and_ln8_1_fu_200_p2;
reg   [0:0] and_ln8_1_reg_275;
wire   [31:0] sum_1_fu_205_p3;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage2_subdone;
reg   [10:0] ap_phi_mux_i_0_phi_fu_94_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln8_fu_122_p1;
reg   [31:0] grp_fu_101_p0;
reg   [31:0] grp_fu_101_p1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire   [31:0] bitcast_ln8_fu_128_p1;
wire   [31:0] bitcast_ln8_1_fu_145_p1;
wire   [7:0] tmp_fu_131_p4;
wire   [22:0] trunc_ln8_fu_141_p1;
wire   [7:0] tmp_3_fu_148_p4;
wire   [22:0] trunc_ln8_1_fu_158_p1;
wire   [0:0] or_ln8_fu_186_p2;
wire   [0:0] or_ln8_1_fu_190_p2;
wire   [0:0] and_ln8_fu_194_p2;
reg   [1:0] grp_fu_101_opcode;
wire    ap_block_pp0_stage3_00001;
wire    ap_block_pp0_stage2_00001;
wire    ap_CS_fsm_state13;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

kernel7_faddfsub_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel7_faddfsub_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_101_p0),
    .din1(grp_fu_101_p1),
    .opcode(grp_fu_101_opcode),
    .ce(1'b1),
    .dout(grp_fu_101_p2)
);

kernel7_fcmp_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
kernel7_fcmp_32nscud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_load_reg_231),
    .din1(b_load_reg_238),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_106_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln6_reg_212 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_0_reg_90 <= i_reg_216;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_90 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_reg_212_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        sum_0_reg_78 <= sum_1_fu_205_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sum_0_reg_78 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln6_reg_212 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_load_reg_231 <= a_q0;
        b_load_reg_238 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_reg_212_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        and_ln8_1_reg_275 <= and_ln8_1_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_216 <= i_fu_116_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln6_reg_212 <= icmp_ln6_fu_110_p2;
        icmp_ln6_reg_212_pp0_iter1_reg <= icmp_ln6_reg_212;
        icmp_ln6_reg_212_pp0_iter2_reg <= icmp_ln6_reg_212_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_reg_212 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        icmp_ln8_1_reg_250 <= icmp_ln8_1_fu_168_p2;
        icmp_ln8_2_reg_255 <= icmp_ln8_2_fu_174_p2;
        icmp_ln8_3_reg_260 <= icmp_ln8_3_fu_180_p2;
        icmp_ln8_reg_245 <= icmp_ln8_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln6_reg_212_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        tmp_1_reg_270 <= grp_fu_101_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_reg_212 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_4_reg_265 <= grp_fu_106_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln6_fu_110_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_reg_212 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_94_p4 = i_reg_216;
    end else begin
        ap_phi_mux_i_0_phi_fu_94_p4 = i_0_reg_90;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_reg_212 == 1'd0) & (1'b0 == ap_block_pp0_stage2_00001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_101_opcode = 2'd1;
    end else if (((icmp_ln6_reg_212_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_00001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'd1 == and_ln8_1_reg_275))) begin
        grp_fu_101_opcode = 2'd0;
    end else begin
        grp_fu_101_opcode = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_101_p0 = sum_0_reg_78;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_101_p0 = a_load_reg_231;
    end else begin
        grp_fu_101_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_101_p1 = tmp_1_reg_270;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_101_p1 = b_load_reg_238;
    end else begin
        grp_fu_101_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln6_fu_110_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln6_fu_110_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = zext_ln8_fu_122_p1;

assign and_ln8_1_fu_200_p2 = (tmp_4_reg_265 & and_ln8_fu_194_p2);

assign and_ln8_fu_194_p2 = (or_ln8_fu_186_p2 & or_ln8_1_fu_190_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = sum_0_reg_78;

assign b_address0 = zext_ln8_fu_122_p1;

assign bitcast_ln8_1_fu_145_p1 = b_load_reg_238;

assign bitcast_ln8_fu_128_p1 = a_load_reg_231;

assign i_fu_116_p2 = (ap_phi_mux_i_0_phi_fu_94_p4 + 11'd1);

assign icmp_ln6_fu_110_p2 = ((ap_phi_mux_i_0_phi_fu_94_p4 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln8_1_fu_168_p2 = ((trunc_ln8_fu_141_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln8_2_fu_174_p2 = ((tmp_3_fu_148_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_3_fu_180_p2 = ((trunc_ln8_1_fu_158_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_162_p2 = ((tmp_fu_131_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln8_1_fu_190_p2 = (icmp_ln8_3_reg_260 | icmp_ln8_2_reg_255);

assign or_ln8_fu_186_p2 = (icmp_ln8_reg_245 | icmp_ln8_1_reg_250);

assign sum_1_fu_205_p3 = ((and_ln8_1_reg_275[0:0] === 1'b1) ? grp_fu_101_p2 : sum_0_reg_78);

assign tmp_3_fu_148_p4 = {{bitcast_ln8_1_fu_145_p1[30:23]}};

assign tmp_fu_131_p4 = {{bitcast_ln8_fu_128_p1[30:23]}};

assign trunc_ln8_1_fu_158_p1 = bitcast_ln8_1_fu_145_p1[22:0];

assign trunc_ln8_fu_141_p1 = bitcast_ln8_fu_128_p1[22:0];

assign zext_ln8_fu_122_p1 = ap_phi_mux_i_0_phi_fu_94_p4;

endmodule //kernel7
