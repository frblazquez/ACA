// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel8,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.580000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=132,HLS_SYN_LUT=250,HLS_VERSION=2019_2}" *)

module kernel8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        array_r_address0,
        array_r_ce0,
        array_r_we0,
        array_r_d0,
        array_r_q0,
        multiplier,
        offset
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] array_r_address0;
output   array_r_ce0;
output   array_r_we0;
output  [31:0] array_r_d0;
input  [31:0] array_r_q0;
input  [31:0] multiplier;
input  [31:0] offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] array_r_address0;
reg array_r_ce0;
reg array_r_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] sub_ln5_fu_69_p2;
reg   [31:0] sub_ln5_reg_129;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln5_fu_79_p2;
reg  signed [31:0] array_load_reg_142;
wire    ap_CS_fsm_state3;
wire   [31:0] mul_ln6_fu_104_p2;
reg   [31:0] mul_ln6_reg_147;
wire    ap_CS_fsm_state4;
wire   [30:0] i_fu_113_p2;
wire    ap_CS_fsm_state5;
reg   [30:0] i_0_reg_57;
wire  signed [63:0] sext_ln6_fu_99_p1;
wire   [63:0] zext_ln6_fu_108_p1;
wire   [31:0] zext_ln5_fu_75_p1;
wire   [30:0] add_ln6_fu_84_p2;
wire   [31:0] zext_ln6_1_fu_90_p1;
wire   [31:0] add_ln6_1_fu_94_p2;
wire  signed [31:0] mul_ln6_fu_104_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_57 <= i_fu_113_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_57 <= 31'd6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        array_load_reg_142 <= array_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln6_reg_147 <= mul_ln6_fu_104_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sub_ln5_reg_129 <= sub_ln5_fu_69_p2;
    end
end

always @ (*) begin
    if (((icmp_ln5_fu_79_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln5_fu_79_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        array_r_address0 = zext_ln6_fu_108_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        array_r_address0 = sext_ln6_fu_99_p1;
    end else begin
        array_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        array_r_ce0 = 1'b1;
    end else begin
        array_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        array_r_we0 = 1'b1;
    end else begin
        array_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln5_fu_79_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln6_1_fu_94_p2 = (zext_ln6_1_fu_90_p1 + offset);

assign add_ln6_fu_84_p2 = ($signed(i_0_reg_57) + $signed(31'd2147483642));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign array_r_d0 = mul_ln6_reg_147;

assign i_fu_113_p2 = (i_0_reg_57 + 31'd1);

assign icmp_ln5_fu_79_p2 = (($signed(zext_ln5_fu_75_p1) < $signed(sub_ln5_reg_129)) ? 1'b1 : 1'b0);

assign mul_ln6_fu_104_p1 = multiplier;

assign mul_ln6_fu_104_p2 = ($signed(array_load_reg_142) * $signed(mul_ln6_fu_104_p1));

assign sext_ln6_fu_99_p1 = $signed(add_ln6_1_fu_94_p2);

assign sub_ln5_fu_69_p2 = (32'd1023 - offset);

assign zext_ln5_fu_75_p1 = i_0_reg_57;

assign zext_ln6_1_fu_90_p1 = add_ln6_fu_84_p2;

assign zext_ln6_fu_108_p1 = i_0_reg_57;

endmodule //kernel8
