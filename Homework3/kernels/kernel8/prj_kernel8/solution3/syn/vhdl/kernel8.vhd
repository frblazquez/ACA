-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    array_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    array_0_ce0 : OUT STD_LOGIC;
    array_0_we0 : OUT STD_LOGIC;
    array_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    array_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    array_1_ce0 : OUT STD_LOGIC;
    array_1_we0 : OUT STD_LOGIC;
    array_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    array_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    array_2_ce0 : OUT STD_LOGIC;
    array_2_we0 : OUT STD_LOGIC;
    array_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    array_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    array_3_ce0 : OUT STD_LOGIC;
    array_3_we0 : OUT STD_LOGIC;
    array_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    array_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    array_4_ce0 : OUT STD_LOGIC;
    array_4_we0 : OUT STD_LOGIC;
    array_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    array_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    array_5_ce0 : OUT STD_LOGIC;
    array_5_we0 : OUT STD_LOGIC;
    array_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    array_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    multiplier : IN STD_LOGIC_VECTOR (31 downto 0);
    offset : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kernel8 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel8,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.674000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=5198,HLS_SYN_LUT=3929,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv25_4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_const_lv25_3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000011";
    constant ap_const_lv25_2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_const_lv25_1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv31_6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000110";
    constant ap_const_lv24_4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_const_lv24_3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000011";
    constant ap_const_lv24_2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";
    constant ap_const_lv31_7FFFFFFA : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111010";
    constant ap_const_lv32_AB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101011";
    constant ap_const_lv31_AB : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010101011";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv65_17F405FD1 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101111111010000000101111111010001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv63_BFA02FE9 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000010111111101000000010111111101001";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_0_reg_230 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_0_reg_230_pp0_iter1_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_0_reg_230_pp0_iter2_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal i_0_reg_230_pp0_iter3_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal i_0_reg_230_pp0_iter4_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal i_0_reg_230_pp0_iter5_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal i_0_reg_230_pp0_iter6_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal i_0_reg_230_pp0_iter7_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal i_0_reg_230_pp0_iter8_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln5_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln5_reg_380 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln5_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_385 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_385_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_385_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_385_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_385_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_385_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_385_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_385_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_385_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln6_1_fu_284_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln6_1_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln6_1_reg_389_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln6_1_reg_389_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln6_1_reg_389_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln6_1_reg_389_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln6_1_reg_389_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln6_1_reg_389_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln6_1_reg_389_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln6_1_reg_389_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_301_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_395 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state17_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state21_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state25_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_state29_pp0_stage3_iter6 : BOOLEAN;
    signal ap_block_state33_pp0_stage3_iter7 : BOOLEAN;
    signal ap_block_state37_pp0_stage3_iter8 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_1_reg_400 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state27_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state31_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state35_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state39_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal grp_fu_295_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal urem_ln6_1_reg_434 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal tmp_2_reg_469 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln6_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln6_reg_473 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state20_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state28_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state32_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_state36_pp0_stage2_iter8 : BOOLEAN;
    signal ap_block_state40_pp0_stage2_iter9 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_phi_mux_i_0_phi_fu_234_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_phi_ln6_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_phi_ln6_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_phi_ln6_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_phi_ln6_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_phi_ln6_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_phi_ln6_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter6_phi_ln6_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter7_phi_ln6_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter8_phi_ln6_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter9_phi_ln6_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln6_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln6_1_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal zext_ln5_fu_265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln6_fu_274_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln6_2_fu_280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_295_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal mul_ln6_1_fu_310_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln6_1_fu_310_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal grp_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln6_2_fu_340_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln6_2_fu_340_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln6_fu_356_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln6_1_fu_310_p00 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln6_2_fu_340_p00 : STD_LOGIC_VECTOR (62 downto 0);

    component kernel8_urem_32nsbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel8_urem_31nscud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;



begin
    kernel8_urem_32nsbkb_U1 : component kernel8_urem_32nsbkb
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 9,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_289_p0,
        din1 => grp_fu_289_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_289_p2);

    kernel8_urem_31nscud_U2 : component kernel8_urem_31nscud
    generic map (
        ID => 1,
        NUM_STAGE => 35,
        din0_WIDTH => 31,
        din1_WIDTH => 9,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => i_0_reg_230,
        din1 => grp_fu_295_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_295_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter9_phi_ln6_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((tmp_1_reg_400 = ap_const_lv25_0)) and not((tmp_1_reg_400 = ap_const_lv25_1)) and not((tmp_1_reg_400 = ap_const_lv25_2)) and not((tmp_1_reg_400 = ap_const_lv25_3)) and not((tmp_1_reg_400 = ap_const_lv25_4)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln5_reg_385_pp0_iter8_reg = ap_const_lv1_1))) then 
                ap_phi_reg_pp0_iter9_phi_ln6_reg_242 <= array_5_q0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (tmp_1_reg_400 = ap_const_lv25_4) and (icmp_ln5_reg_385_pp0_iter8_reg = ap_const_lv1_1))) then 
                ap_phi_reg_pp0_iter9_phi_ln6_reg_242 <= array_4_q0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (tmp_1_reg_400 = ap_const_lv25_3) and (icmp_ln5_reg_385_pp0_iter8_reg = ap_const_lv1_1))) then 
                ap_phi_reg_pp0_iter9_phi_ln6_reg_242 <= array_3_q0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (tmp_1_reg_400 = ap_const_lv25_2) and (icmp_ln5_reg_385_pp0_iter8_reg = ap_const_lv1_1))) then 
                ap_phi_reg_pp0_iter9_phi_ln6_reg_242 <= array_2_q0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (tmp_1_reg_400 = ap_const_lv25_1) and (icmp_ln5_reg_385_pp0_iter8_reg = ap_const_lv1_1))) then 
                ap_phi_reg_pp0_iter9_phi_ln6_reg_242 <= array_1_q0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (tmp_1_reg_400 = ap_const_lv25_0) and (icmp_ln5_reg_385_pp0_iter8_reg = ap_const_lv1_1))) then 
                ap_phi_reg_pp0_iter9_phi_ln6_reg_242 <= array_0_q0;
            elsif (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                ap_phi_reg_pp0_iter9_phi_ln6_reg_242 <= ap_phi_reg_pp0_iter8_phi_ln6_reg_242;
            end if; 
        end if;
    end process;

    i_0_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln5_reg_385 = ap_const_lv1_1))) then 
                i_0_reg_230 <= i_reg_395;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_230 <= ap_const_lv31_6;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln5_fu_269_p2 = ap_const_lv1_1))) then
                add_ln6_1_reg_389 <= add_ln6_1_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln6_1_reg_389_pp0_iter1_reg <= add_ln6_1_reg_389;
                add_ln6_1_reg_389_pp0_iter2_reg <= add_ln6_1_reg_389_pp0_iter1_reg;
                add_ln6_1_reg_389_pp0_iter3_reg <= add_ln6_1_reg_389_pp0_iter2_reg;
                add_ln6_1_reg_389_pp0_iter4_reg <= add_ln6_1_reg_389_pp0_iter3_reg;
                add_ln6_1_reg_389_pp0_iter5_reg <= add_ln6_1_reg_389_pp0_iter4_reg;
                add_ln6_1_reg_389_pp0_iter6_reg <= add_ln6_1_reg_389_pp0_iter5_reg;
                add_ln6_1_reg_389_pp0_iter7_reg <= add_ln6_1_reg_389_pp0_iter6_reg;
                add_ln6_1_reg_389_pp0_iter8_reg <= add_ln6_1_reg_389_pp0_iter7_reg;
                i_0_reg_230_pp0_iter1_reg <= i_0_reg_230;
                i_0_reg_230_pp0_iter2_reg <= i_0_reg_230_pp0_iter1_reg;
                i_0_reg_230_pp0_iter3_reg <= i_0_reg_230_pp0_iter2_reg;
                i_0_reg_230_pp0_iter4_reg <= i_0_reg_230_pp0_iter3_reg;
                i_0_reg_230_pp0_iter5_reg <= i_0_reg_230_pp0_iter4_reg;
                i_0_reg_230_pp0_iter6_reg <= i_0_reg_230_pp0_iter5_reg;
                i_0_reg_230_pp0_iter7_reg <= i_0_reg_230_pp0_iter6_reg;
                i_0_reg_230_pp0_iter8_reg <= i_0_reg_230_pp0_iter7_reg;
                icmp_ln5_reg_385 <= icmp_ln5_fu_269_p2;
                icmp_ln5_reg_385_pp0_iter1_reg <= icmp_ln5_reg_385;
                icmp_ln5_reg_385_pp0_iter2_reg <= icmp_ln5_reg_385_pp0_iter1_reg;
                icmp_ln5_reg_385_pp0_iter3_reg <= icmp_ln5_reg_385_pp0_iter2_reg;
                icmp_ln5_reg_385_pp0_iter4_reg <= icmp_ln5_reg_385_pp0_iter3_reg;
                icmp_ln5_reg_385_pp0_iter5_reg <= icmp_ln5_reg_385_pp0_iter4_reg;
                icmp_ln5_reg_385_pp0_iter6_reg <= icmp_ln5_reg_385_pp0_iter5_reg;
                icmp_ln5_reg_385_pp0_iter7_reg <= icmp_ln5_reg_385_pp0_iter6_reg;
                icmp_ln5_reg_385_pp0_iter8_reg <= icmp_ln5_reg_385_pp0_iter7_reg;
                tmp_2_reg_469 <= mul_ln6_2_fu_340_p2(62 downto 39);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                ap_phi_reg_pp0_iter1_phi_ln6_reg_242 <= ap_phi_reg_pp0_iter0_phi_ln6_reg_242;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                ap_phi_reg_pp0_iter2_phi_ln6_reg_242 <= ap_phi_reg_pp0_iter1_phi_ln6_reg_242;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                ap_phi_reg_pp0_iter3_phi_ln6_reg_242 <= ap_phi_reg_pp0_iter2_phi_ln6_reg_242;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                ap_phi_reg_pp0_iter4_phi_ln6_reg_242 <= ap_phi_reg_pp0_iter3_phi_ln6_reg_242;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                ap_phi_reg_pp0_iter5_phi_ln6_reg_242 <= ap_phi_reg_pp0_iter4_phi_ln6_reg_242;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                ap_phi_reg_pp0_iter6_phi_ln6_reg_242 <= ap_phi_reg_pp0_iter5_phi_ln6_reg_242;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                ap_phi_reg_pp0_iter7_phi_ln6_reg_242 <= ap_phi_reg_pp0_iter6_phi_ln6_reg_242;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                ap_phi_reg_pp0_iter8_phi_ln6_reg_242 <= ap_phi_reg_pp0_iter7_phi_ln6_reg_242;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln5_reg_385 = ap_const_lv1_1))) then
                i_reg_395 <= i_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                mul_ln6_reg_473 <= mul_ln6_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                sub_ln5_reg_380 <= sub_ln5_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln5_reg_385_pp0_iter8_reg = ap_const_lv1_1))) then
                tmp_1_reg_400 <= mul_ln6_1_fu_310_p2(64 downto 40);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                urem_ln6_1_reg_434 <= grp_fu_295_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln5_fu_269_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3_subdone, ap_block_pp0_stage2_subdone, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter8, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln5_fu_269_p2 = ap_const_lv1_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln5_fu_269_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln6_1_fu_284_p2 <= std_logic_vector(unsigned(offset) + unsigned(zext_ln6_2_fu_280_p1));
    add_ln6_fu_274_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_234_p4) + unsigned(ap_const_lv31_7FFFFFFA));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state41 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage3_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage3_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage2_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln5_fu_269_p2)
    begin
        if ((icmp_ln5_fu_269_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_234_p4_assign_proc : process(i_0_reg_230, ap_CS_fsm_pp0_stage0, icmp_ln5_reg_385, i_reg_395, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln5_reg_385 = ap_const_lv1_1))) then 
            ap_phi_mux_i_0_phi_fu_234_p4 <= i_reg_395;
        else 
            ap_phi_mux_i_0_phi_fu_234_p4 <= i_0_reg_230;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_phi_ln6_reg_242 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    array_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter8, zext_ln6_fu_326_p1, ap_block_pp0_stage3, zext_ln6_1_fu_361_p1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_0_address0 <= zext_ln6_1_fu_361_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            array_0_address0 <= zext_ln6_fu_326_p1(8 - 1 downto 0);
        else 
            array_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    array_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter8, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            array_0_ce0 <= ap_const_logic_1;
        else 
            array_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    array_0_d0 <= mul_ln6_reg_473;

    array_0_we0_assign_proc : process(ap_enable_reg_pp0_iter9, tmp_2_reg_469, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_2_reg_469 = ap_const_lv24_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_0_we0 <= ap_const_logic_1;
        else 
            array_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    array_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter8, zext_ln6_fu_326_p1, ap_block_pp0_stage3, zext_ln6_1_fu_361_p1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_1_address0 <= zext_ln6_1_fu_361_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            array_1_address0 <= zext_ln6_fu_326_p1(8 - 1 downto 0);
        else 
            array_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    array_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter8, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            array_1_ce0 <= ap_const_logic_1;
        else 
            array_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    array_1_d0 <= mul_ln6_reg_473;

    array_1_we0_assign_proc : process(ap_enable_reg_pp0_iter9, tmp_2_reg_469, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_2_reg_469 = ap_const_lv24_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_1_we0 <= ap_const_logic_1;
        else 
            array_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    array_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter8, zext_ln6_fu_326_p1, ap_block_pp0_stage3, zext_ln6_1_fu_361_p1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_2_address0 <= zext_ln6_1_fu_361_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            array_2_address0 <= zext_ln6_fu_326_p1(8 - 1 downto 0);
        else 
            array_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    array_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter8, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            array_2_ce0 <= ap_const_logic_1;
        else 
            array_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    array_2_d0 <= mul_ln6_reg_473;

    array_2_we0_assign_proc : process(ap_enable_reg_pp0_iter9, tmp_2_reg_469, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_2_reg_469 = ap_const_lv24_2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_2_we0 <= ap_const_logic_1;
        else 
            array_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    array_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter8, zext_ln6_fu_326_p1, ap_block_pp0_stage3, zext_ln6_1_fu_361_p1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_3_address0 <= zext_ln6_1_fu_361_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            array_3_address0 <= zext_ln6_fu_326_p1(8 - 1 downto 0);
        else 
            array_3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    array_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter8, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            array_3_ce0 <= ap_const_logic_1;
        else 
            array_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    array_3_d0 <= mul_ln6_reg_473;

    array_3_we0_assign_proc : process(ap_enable_reg_pp0_iter9, tmp_2_reg_469, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_2_reg_469 = ap_const_lv24_3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_3_we0 <= ap_const_logic_1;
        else 
            array_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    array_4_address0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter8, zext_ln6_fu_326_p1, ap_block_pp0_stage3, zext_ln6_1_fu_361_p1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_4_address0 <= zext_ln6_1_fu_361_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            array_4_address0 <= zext_ln6_fu_326_p1(8 - 1 downto 0);
        else 
            array_4_address0 <= "XXXXXXXX";
        end if; 
    end process;


    array_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter8, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            array_4_ce0 <= ap_const_logic_1;
        else 
            array_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    array_4_d0 <= mul_ln6_reg_473;

    array_4_we0_assign_proc : process(ap_enable_reg_pp0_iter9, tmp_2_reg_469, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (tmp_2_reg_469 = ap_const_lv24_4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_4_we0 <= ap_const_logic_1;
        else 
            array_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    array_5_address0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter8, zext_ln6_fu_326_p1, ap_block_pp0_stage3, zext_ln6_1_fu_361_p1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_5_address0 <= zext_ln6_1_fu_361_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            array_5_address0 <= zext_ln6_fu_326_p1(8 - 1 downto 0);
        else 
            array_5_address0 <= "XXXXXXXX";
        end if; 
    end process;


    array_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter8, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            array_5_ce0 <= ap_const_logic_1;
        else 
            array_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    array_5_d0 <= mul_ln6_reg_473;

    array_5_we0_assign_proc : process(ap_enable_reg_pp0_iter9, tmp_2_reg_469, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((not((tmp_2_reg_469 = ap_const_lv24_0)) and not((tmp_2_reg_469 = ap_const_lv24_1)) and not((tmp_2_reg_469 = ap_const_lv24_2)) and not((tmp_2_reg_469 = ap_const_lv24_3)) and not((tmp_2_reg_469 = ap_const_lv24_4)) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            array_5_we0 <= ap_const_logic_1;
        else 
            array_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_289_p0 <= std_logic_vector(unsigned(offset) + unsigned(zext_ln6_2_fu_280_p1));
    grp_fu_289_p1 <= ap_const_lv32_AB(9 - 1 downto 0);
    grp_fu_295_p1 <= ap_const_lv31_AB(9 - 1 downto 0);
    i_fu_301_p2 <= std_logic_vector(unsigned(i_0_reg_230) + unsigned(ap_const_lv31_1));
    icmp_ln5_fu_269_p2 <= "1" when (signed(zext_ln5_fu_265_p1) < signed(sub_ln5_reg_380)) else "0";
    mul_ln6_1_fu_310_p0 <= mul_ln6_1_fu_310_p00(32 - 1 downto 0);
    mul_ln6_1_fu_310_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln6_1_reg_389_pp0_iter8_reg),65));
    mul_ln6_1_fu_310_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln6_1_fu_310_p0) * unsigned(ap_const_lv65_17F405FD1), 65));
    mul_ln6_2_fu_340_p0 <= mul_ln6_2_fu_340_p00(31 - 1 downto 0);
    mul_ln6_2_fu_340_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_230_pp0_iter8_reg),63));
    mul_ln6_2_fu_340_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln6_2_fu_340_p0) * unsigned(ap_const_lv63_BFA02FE9), 63));
    mul_ln6_fu_356_p0 <= multiplier;
    mul_ln6_fu_356_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln6_fu_356_p0) * signed(ap_phi_reg_pp0_iter9_phi_ln6_reg_242))), 32));
    sub_ln5_fu_259_p2 <= std_logic_vector(unsigned(ap_const_lv32_3FF) - unsigned(offset));
    zext_ln5_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_phi_fu_234_p4),32));
    zext_ln6_1_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(urem_ln6_1_reg_434),64));
    zext_ln6_2_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln6_fu_274_p2),32));
    zext_ln6_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_289_p2),64));
end behav;
